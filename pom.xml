<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.znjt.data</groupId>
    <artifactId>deliverc</artifactId>
    <version>1.0.16</version>


    <dependencies>
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.4.6</version>
        </dependency>

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.46</version>
        </dependency>

        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>1.1.10</version>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
        </dependency>


        <!-- ehchache -->
        <dependency>
            <groupId>net.sf.ehcache</groupId>
            <artifactId>ehcache</artifactId>
            <version>2.8.3</version>
        </dependency>
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-ehcache</artifactId>
            <version>1.0.0</version>
        </dependency>


        <dependency>
            <groupId>io.grpc</groupId>
            <artifactId>grpc-netty-shaded</artifactId>
            <version>1.19.0</version>
        </dependency>
        <dependency>
            <groupId>io.grpc</groupId>
            <artifactId>grpc-protobuf</artifactId>
            <version>1.19.0</version>
        </dependency>
        <dependency>
            <groupId>io.grpc</groupId>
            <artifactId>grpc-stub</artifactId>
            <version>1.19.0</version>
        </dependency>

        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.4</version>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.8.1</version>
        </dependency>

        <dependency>
            <groupId>org.apache.thrift</groupId>
            <artifactId>libthrift</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>commons-logging</groupId>
                    <artifactId>commons-logging</artifactId>
                </exclusion>
            </exclusions>
            <version>0.12.0</version>
        </dependency>
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper</artifactId>
            <version>5.1.8</version>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>27.1-jre</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.16.16</version>
            <scope>provided</scope>
        </dependency>

        <!--日志控制，将框架依赖的日志实现通过门面的方式全部替换到slf4j上-->
        <!--排除java自带的java.util.logging.Logger-->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jul-to-slf4j</artifactId>
            <version>1.7.25</version>
        </dependency>
        <!--排除log4j的实现-->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>log4j-over-slf4j</artifactId>
            <version>1.7.25</version>
        </dependency>
        <!--排除apache的commons-logging日志-->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>1.7.25</version>
        </dependency>

        <!-- slf4j核心包-->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.25</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>1.7.25</version>
            <scope>runtime</scope>
        </dependency>

        <!--核心log4j2jar包-->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>2.8.2</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>2.8.2</version>
        </dependency>
        <!--用于与slf4j保持桥接-->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <version>2.8.2</version>
        </dependency>

        <!--需要使用log4j2的AsyncLogger需要包含disruptor-->
        <dependency>
            <groupId>com.lmax</groupId>
            <artifactId>disruptor</artifactId>
            <version>3.2.0</version>
        </dependency>

    </dependencies>

    <build>
        <sourceDirectory>src/main/java</sourceDirectory>
        <extensions>
            <extension>
                <groupId>kr.motd.maven</groupId>
                <artifactId>os-maven-plugin</artifactId>
                <version>1.5.0.Final</version>
            </extension>
        </extensions>
        <!--
        Maven默认 打包 的时候是不会将src/main/java下的xml文件打包的，而是从resource目录下寻找
        解决方案有2种：
        1. 通过如下配置，可以将src/main/java下的mapper文件打包到/target文件夹中；
        2. 在src/main/resource中存放mapper文件
        -->
        <resources>
            <!--
               注意：配置了从resource后，以前默认寻找配置文件的路径就会失效，
               需要手工把以前默认的位置也添加进来
            -->
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.xml</include>
                </includes>
                <filtering>false</filtering>
            </resource>
            <!-- 控制资源文件的拷贝 -->
            <!--<resource>-->
                <!--<directory>src/main/resources</directory>-->
                <!--<includes>-->
                    <!--<include>**/*.properties</include>-->
                    <!--<include>**/*.xml</include>-->
                <!--</includes>-->
                <!--<filtering>false</filtering>-->
                <!--<targetPath>${project.build.directory}/config</targetPath>-->
            <!--</resource>-->

        </resources>
        <plugins>
            <plugin>
                <groupId>org.xolstice.maven.plugins</groupId>
                <artifactId>protobuf-maven-plugin</artifactId>
                <version>0.5.1</version>
                <configuration>
                    <!-- 这里是 protobuf 文件的路径 -->
                    <protoSourceRoot>${project.basedir}/src/main/proto</protoSourceRoot>
                    <!--默认值-->
                    <!--<outputDirectory>${project.build.directory}/generated-sources/protobuf/java</outputDirectory>-->
                    <outputDirectory>${project.build.sourceDirectory}</outputDirectory>
                    <!--设置是否在生成java文件之前清空outputDirectory的文件，默认值为true，设置为false时也会覆盖同名文件-->
                    <clearOutputDirectory>false</clearOutputDirectory>

                    <protocArtifact>com.google.protobuf:protoc:3.6.1:exe:${os.detected.classifier}</protocArtifact>
                    <pluginId>grpc-java</pluginId>
                    <pluginArtifact>io.grpc:protoc-gen-grpc-java:1.19.0:exe:${os.detected.classifier}</pluginArtifact>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>compile</goal>
                            <goal>compile-custom</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- 设置编译版本 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <!-- 主程序入口main方法所在类 -->
                        <manifest>
                            <mainClass>com.znjt.boot.Boot</mainClass>
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>lib/</classpathPrefix>
                        </manifest>
                        <!-- (配置文件外置目录) -->
                        <manifestEntries>
                            <Class-Path>config/</Class-Path>
                        </manifestEntries>
                    </archive>
                    <classesDirectory>
                    </classesDirectory>
                </configuration>
            </plugin>

            <!-- 拷贝依赖的jar包到lib目录 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>
                                ${project.build.directory}/lib
                            </outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- 解决资源文件的编码问题 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>2.5</version>
                <configuration>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.18.1</version>
                <configuration>
                    <skipTests>true</skipTests>
                </configuration>
            </plugin>

            <!--<plugin>-->
            <!--<groupId>org.apache.thrift.tools</groupId>-->
            <!--<artifactId>maven-thrift-plugin</artifactId>-->
            <!--<version>0.1.11</version>-->
            <!--<configuration>-->
            <!--&lt;!&ndash;<thriftExecutable>/usr/local/bin/thrift</thriftExecutable>&ndash;&gt;-->
            <!--&lt;!&ndash;<thriftSourceRoot>src/main/thrift</thriftSourceRoot>&ndash;&gt;-->
            <!--&lt;!&ndash;<outputDirectory>src/main/java/com/znjt/thrift</outputDirectory>&ndash;&gt;-->
            <!--</configuration>-->
            <!--<executions>-->
            <!--<execution>-->
            <!--<id>thrift-sources</id>-->
            <!--<phase>generate-sources</phase>-->
            <!--<goals>-->
            <!--<goal>compile</goal>-->
            <!--</goals>-->
            <!--</execution>-->
            <!--&lt;!&ndash;<execution>&ndash;&gt;-->
            <!--&lt;!&ndash;<id>thrift-test-sources</id>&ndash;&gt;-->
            <!--&lt;!&ndash;<phase>generate-test-sources</phase>&ndash;&gt;-->
            <!--&lt;!&ndash;<goals>&ndash;&gt;-->
            <!--&lt;!&ndash;<goal>testCompile</goal>&ndash;&gt;-->
            <!--&lt;!&ndash;</goals>&ndash;&gt;-->
            <!--&lt;!&ndash;</execution>&ndash;&gt;-->
            <!--</executions>-->
            <!--</plugin>-->

            <!--<plugin>-->
            <!--&lt;!&ndash;-->
            <!--mvn package assembly:single-->
            <!--这个文件不但包含了自己项目中的代码和资源，还包含了所有依赖包的内容-->
            <!--直接通过java -jar来运行-->
            <!--&ndash;&gt;-->
            <!--<groupId>org.apache.maven.plugins</groupId>-->
            <!--<artifactId>maven-assembly-plugin</artifactId>-->
            <!--<version>2.5.5</version>-->
            <!--<configuration>-->
            <!--<archive>-->
            <!--<manifest>-->
            <!--<mainClass></mainClass>-->
            <!--</manifest>-->
            <!--</archive>-->
            <!--<descriptorRefs>-->
            <!--<descriptorRef>jar-with-dependencies</descriptorRef>-->
            <!--</descriptorRefs>-->
            <!--</configuration>-->
            <!--</plugin>-->
            <!--&lt;!&ndash;-->
            <!--对于maven构建的项目，由于idea中maven的配置优先，-->
            <!--需要在pom.xml中对maven-surefire-plugin进行配置-->
            <!--&ndash;&gt;-->
            <!--<plugin>-->
            <!--<groupId>org.apache.maven.plugins</groupId>-->
            <!--<artifactId>maven-surefire-plugin</artifactId>-->
            <!--<version>2.12.4</version>-->
            <!--<configuration>-->
            <!--<forkMode>once</forkMode>-->
            <!--<argLine>-Dfile.encoding=UTF-8</argLine>-->
            <!--</configuration>-->
            <!--</plugin>-->

            <!--<plugin>-->
            <!--<groupId>org.apache.maven.plugins</groupId>-->
            <!--<artifactId>maven-compiler-plugin</artifactId>-->
            <!--<version>3.7.0</version>-->
            <!--<configuration>-->
            <!--<source>1.8</source>-->
            <!--<target>1.8</target>-->
            <!--</configuration>-->
            <!--</plugin>-->
        </plugins>
    </build>


    <!--<build>-->
        <!--<finalName>FlightChangeService</finalName>-->
        <!--<resources>-->
            <!--<resource>-->
                <!--&lt;!&ndash;指定mapping下的所有xml文件打包在jar中&ndash;&gt;-->
                <!--<targetPath>${project.build.directory}/classes</targetPath>-->
                <!--<directory>src/main/resources</directory>-->
                <!--<filtering>true</filtering>-->
                <!--<includes>-->
                    <!--<include>mapping/*.xml</include>-->
                <!--</includes>-->
            <!--</resource>-->
            <!--<resource>-->
                <!--&lt;!&ndash;resources下一级的所有.xml .properties文件复制到config目录下&ndash;&gt;-->
                <!--<targetPath>${project.build.directory}/config</targetPath>-->
                <!--<directory>src/main/resources</directory>-->
                <!--<filtering>true</filtering>-->
                <!--<includes>-->
                    <!--<include>**.xml</include>-->
                    <!--<include>**.properties</include>-->
                <!--</includes>-->
            <!--</resource>-->
        <!--</resources>-->
        <!--<plugins>-->
            <!--&lt;!&ndash;maven-dependency插件，将项目所有依赖包放到lib目录下&ndash;&gt;-->
            <!--<plugin>-->
                <!--<groupId>org.apache.maven.plugins</groupId>-->
                <!--<artifactId>maven-dependency-plugin</artifactId>-->
                <!--<executions>-->
                    <!--<execution>-->
                        <!--<id>copy-dependencies</id>-->
                        <!--<phase>package</phase>-->
                        <!--<goals>-->
                            <!--<goal>copy-dependencies</goal>-->
                        <!--</goals>-->
                        <!--<configuration>-->
                            <!--<type>jar</type>-->
                            <!--<includeTypes>jar</includeTypes>-->
                            <!--<outputDirectory>-->
                                <!--${project.build.directory}/lib-->
                            <!--</outputDirectory>-->
                        <!--</configuration>-->
                    <!--</execution>-->
                <!--</executions>-->
            <!--</plugin>-->

            <!--<plugin>-->
                <!--<groupId>org.apache.maven.plugins</groupId>-->
                <!--<artifactId>maven-jar-plugin</artifactId>-->
                <!--<configuration>-->
                    <!--<classesDirectory>target/classes/</classesDirectory>-->
                    <!--<archive>-->
                        <!--&lt;!&ndash;生成的jar中，不要包含pom.xml和pom.properties这两个文件&ndash;&gt;-->
                        <!--<addMavenDescriptor>false</addMavenDescriptor>-->
                        <!--<manifest>-->
                            <!--<mainClass>com.loongair.Application</mainClass>-->
                            <!--&lt;!&ndash; 打包时 MANIFEST.MF文件不记录的时间戳版本 &ndash;&gt;-->
                            <!--<useUniqueVersions>false</useUniqueVersions>-->
                            <!--<addClasspath>true</addClasspath>-->
                            <!--<classpathPrefix>lib/</classpathPrefix>-->
                        <!--</manifest>-->
                        <!--<manifestEntries>-->
                            <!--&lt;!&ndash;jar中的MANIFEST.MF文件ClassPath需要添加config目录才能读取到配置文件&ndash;&gt;-->
                            <!--<Class-Path>config/ .</Class-Path>-->
                        <!--</manifestEntries>-->
                    <!--</archive>-->
                <!--</configuration>-->
            <!--</plugin>-->
        <!--</plugins>-->
    <!--</build>-->
</project>