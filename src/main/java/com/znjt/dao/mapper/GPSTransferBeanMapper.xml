<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.znjt.dao.mapper.GPSTransferBeanMapper">
    <!--
    默认情况下，mybatis的全局二级缓存是启用的，但是各个Mapper配置文件中默认是关闭的。
    开启当前命名空间的二级缓存需要显示使用cache标签。
        二级缓存的特点：
        1. 二级缓存的作用域是命名空间级别的
        2. sqlSession的增删改操作在清空一级缓存的同时会清空二级缓存
        3. 二级缓存的情况操作只是把Key对应的value设置为null，而不是删除整个entry。
        4. 发出查询操作的条件是二级缓存中不存在对应的entry或entry的value值为null。
        eviction:缓存满员时的清楚策略；
        flushInterval：清空缓存的时间间隔，防止数据不一致，使用默认的增删改操作清楚缓存。）
        size：缓存对象的最大个数。
        readOnly：缓存中的数据是否是只读的，默认是false，当为true时，缓存返回对象引用，当为false是
        返回对象的一份拷贝，放置缓存中的数据被修改。

        5. 特别注意，当Session关闭时才会把Session中的数据放入到对应的命名空间的二级缓存中。
        6. 数据查找的顺序：首先当当前命名空间的二级缓存中查找数据，再去当前Session中的一级缓存中查找数据。
     使用二级缓存的前提：
        1. 多个namespace不要操作同一张表，因为二级缓存是基于namespace，如果多个namespace操作同一张表，那么数据的变化
        另一个namespace是感知不到的，造成数据不一致的情况。
        2. 一个DTO接口就操作一张表，这样确保了一个映射文件的命名空间和DTO接口的对应。
        3. 对不变化的数据才需要使用二级缓存，否则二级缓存会降低效率。

        cache默认使用mybatis自带的二级缓存实现，可以通过type指定到其他缓存产品上.
        如ehcache:
        <cache type="org.mybatis.caches.ehcache.EhcacheCache"/>

        总之：二级缓存在项目中很少使用

        其他：
        1.每个select标签都有useCache="true"
            false:不使用缓存（一级缓存依然使用，二级缓存不适用）
        2.每个增删改标签的：flushCache="true";（一级、二级缓存都会清除）
            增删改执行完成后就会清除缓存
        3.SqlSession.cleanCache（）；只是清除当前Session的一级缓存

    <cache eviction="FIFO" flushInterval="10800000" readOnly="true" size="512"/>
    -->
    <!--表示当前命名空间的二级缓存采用和哪个命名空间下的二级缓存使用相同的缓存产品和配置-->
    <!--<cache-ref namespace="com.btt.xxx"/>-->

    <!--
     <select id="" useCache="false">
     useCache=false在语句级别禁止使用二级缓存
     -->

    <!--
    _parameter/_databaseId 是mybatis的内置参数，_parameter表示传入参数的引用，
    _databaseId代表数据的VENDER，这两个参数可以在sql中直接使用
    -->
    <!--通过sql可以定义公用的片段-->
    <!--<sql id="sub_fregment">-->
    <!--id,name-->
    <!--</sql>-->


    <!--客户端 begin-->
    <!--获取没有上传的记录-->
    <select id="findUnUpLoadGPSRecordDatas" resultType="GPSTransferIniBean" useCache="false">

        <!--
        通过include标签引入外面定义的sql片段，同时可以在内部通过property定义新的属性，
        在被引入的sql片段内中通过${}的方式获取新定义的属性值.注意，在sql片段中只能使用${}获取定义的
        属性值，sql片段中是不能使用#{},因为sql片段是不能预编译的，而#{}的含义就是预编译。
        <include refid="sub_fregment">-->
        <!--<property name="username" value="sz"/>-->
        <!--<property name="age" value="12"/>-->
        <!--</include>-->
        <!-- 通过ognl表达式获取value对应属性的值，将值赋值给新创建的变量，之后就可以在sql中引用这个变量-->
        <!--<bind name="ps" value="pageSize"/>-->

        select id,GPSID,COLLECT_TIME,STATUS,LATITUDE,LONGITUDE,SPEED,AZIMUTH,DECLINATION,CREATE_TIME,UPLOAD_TIME,RESULT,AREA,dataid,UPLOADSTATUS,original_Url as originalUrl
        from gps where UPLOADSTATUS = 0 and ORIGINAL_URL is not null and trim(ORIGINAL_URL) != '' order by id limit 0,#{pageSize}
    </select>
    <!--获取没有上传的记录-->
    <select id="findUnUpLoadGPSRecordDatasOnCondition" resultType="GPSTransferIniBean" useCache="false">

        <!--
        通过include标签引入外面定义的sql片段，同时可以在内部通过property定义新的属性，
        在被引入的sql片段内中通过${}的方式获取新定义的属性值.注意，在sql片段中只能使用${}获取定义的
        属性值，sql片段中是不能使用#{},因为sql片段是不能预编译的，而#{}的含义就是预编译。
        <include refid="sub_fregment">-->
        <!--<property name="username" value="sz"/>-->
        <!--<property name="age" value="12"/>-->
        <!--</include>-->
        <!-- 通过ognl表达式获取value对应属性的值，将值赋值给新创建的变量，之后就可以在sql中引用这个变量-->
        <!--<bind name="ps" value="pageSize"/>-->

        select id,GPSID,COLLECT_TIME,STATUS,LATITUDE,LONGITUDE,SPEED,AZIMUTH,DECLINATION,CREATE_TIME,UPLOAD_TIME,RESULT,AREA,dataid,UPLOADSTATUS,original_Url as originalUrl
        from gps where UPLOADSTATUS = 0 and ORIGINAL_URL is not null and trim(ORIGINAL_URL) != '' and AREA is not null and  trim(AREA) != ''  order by id  limit 0,#{pageSize}
    </select>

    <select id="findTotalJobs" resultType="java.lang.Long">
        select count(1) from gps where id >= #{id}
    </select>


    <select id="findUnUpLoadGPSRecords" resultType="java.lang.Long">
         select count(1) from gps where UPLOADSTATUS = 0 and ORIGINAL_URL is not null and trim(ORIGINAL_URL) != ''
    </select>


    <select id="findTotalJobsOnCondition" resultType="java.lang.Long">
        select count(1) from gps where id >= #{id}  and AREA is not null and  trim(AREA) != ''
    </select>


    <select id="findUnUpLoadGPSRecordsOnCondition" resultType="java.lang.Long">
         select count(1) from gps where UPLOADSTATUS = 0 and ORIGINAL_URL is not null and trim(ORIGINAL_URL) != '' and AREA is not null and  trim(AREA) != ''
    </select>

    <!--
    获取存在图像信息却没有上传图像的记录
    flushCache默认是false，查询默认是不会清空一级二级缓存的。

    session.clearCache()方法清空的是当前session的一级缓存，对二级缓存没有影响。
    新版本的mybatis中的全局属性localCacheScope可以设置缓存的作用范围，默认是Session的，就是当前会话范围。当设置为Statement时
    表示范围是语句范围，语句执行结束就情况缓存（类似select标签中的flushCache=true），这样即可以起到禁用一级缓存。

    select GPSID,STATUS,dataid, original_Url as originalUrl,basedir as baseDir from gps where  ORIGINAL_URL is not null and trim(ORIGINAL_URL) <![CDATA[<>]] ''  and trim(ORIGINAL_URL) <![CDATA[<>]] 'no image'  and  UPLOADSTATUS = 1 and img_uploaded = false   limit 0,#{pageSize}
    -->
    <select id="findUnUpLoadGPSImgDatas" resultType="GPSTransferIniBean" useCache="false" flushCache="false">
         select id, GPSID,STATUS,dataid, original_Url as originalUrl,basedir as baseDir from gps where  ORIGINAL_URL is not null and trim(ORIGINAL_URL) != ''  and trim(ORIGINAL_URL) != 'no image'  and  UPLOADSTATUS = 1 and img_uploaded = false order by id  limit 0,#{pageSize}
    </select>

    <select id="findUnUpLoadGPSImgDatas4EvenOrOdd" resultType="GPSTransferIniBean" useCache="false" flushCache="false">
         select id, GPSID,STATUS,dataid, original_Url as originalUrl,basedir as baseDir from gps where  ORIGINAL_URL is not null and trim(ORIGINAL_URL) != ''  and trim(ORIGINAL_URL) != 'no image'  and  UPLOADSTATUS = 1 and img_uploaded = false and id%2 = #{mod} order by id  limit 0,#{pageSize}
    </select>

    <select id="findTotalImgJobs" resultType="java.lang.Long">
         select count(1) from gps where id >=#{id}
    </select>

    <select id="findUnUpLoadGPSImgRecords" resultType="java.lang.Long">
        select count(1) from gps where  ORIGINAL_URL is not null and trim(ORIGINAL_URL) != ''  and trim(ORIGINAL_URL) != 'no image'  and  UPLOADSTATUS = 1 and img_uploaded = false;
    </select>


    <!--
    更新刚刚更新成功的记录的状态
    flushCache 默认是true，表示同时清空一级、二级缓存。
    -->
    <update id="updateCurrentUpLoadedSuccessGPSRescords" flushCache="true">
        update gps set UPLOADSTATUS = 1 where
        <foreach collection="list" item="item" separator="," open=" gpsid in (" close=")" >
            #{item.gpsid}
        </foreach>
    </update>

    <!--更新图像上传成功的记录-->
    <!--<update id="updateCurrentUploadedSuccessGPSImgRecords">-->
    <!--update gps set img_uploaded = true where-->
    <!--<foreach collection="list" item="item" separator="," open=" gpsid in (" close=")" >-->
    <!--#{item.gpsid}-->
    <!--</foreach>-->
    <!--</update>-->

    <!--批处理更新方式一，效率低-->
    <!--<update id="updateCurrentUploadedSuccessGPSImgRecords">-->
    <!--<foreach collection="list" item="item"  open="" close="" separator=";">-->
    <!--update gps set img_uploaded=${item.img_uploaded},img_err=${item.file_err} where gpsid = ${item.gpsid}-->
    <!--</foreach>-->
    <!--</update>-->

    <!--批量更新方式二：不会形成sql阻塞，效率高-->
    <update id="updateCurrentUploadedSuccessGPSImgRecords" >
        update gps
        <trim prefix="set" suffixOverrides=",">
            <trim prefix="img_uploaded = case" suffix="end,">
                <foreach collection="list" item="item" >
                    when gpsid=#{item.gpsid} then #{item.img_uploaded}
                </foreach>
            </trim>
            <trim prefix=" img_err = case" suffix="end,">
                <foreach collection="list" item="item" >
                    when gpsid=#{item.gpsid} then #{item.file_err}
                </foreach>
            </trim>
        </trim>
        where
        <foreach collection="list" item="item" separator="," open=" gpsid in (" close=")" >
            #{item.gpsid}
        </foreach>
    </update>


    <!--客户端 end-->


    <!--服务器端 begin-->

    <!--
       更新服务端img记录,ORIGINAL_URL 为null说明没有更新过图像，放置重复上传图像
    -->
    <update id="updateGPSImgPath2DBRecord">
        update gps set basedir=#{baseDir}, ORIGINAL_URL=#{originalUrl},total_losted_size=#{totalLostedSize} where dataId=#{dataid} and ORIGINAL_URL is null
    </update>

    <!--批量更新图像地址信息，-->
    <!--<update id="updateBatchGPSImgPath2DBRecord" databaseId="mysql">-->
    <!--<foreach collection="list" item="item"  separator=";">-->
    <!--update gps set basedir=#{item.baseDir},ORIGINAL_URL=#{item.originalUrl}  where dataid=#{item.dataid} and ORIGINAL_URL is null-->
    <!--</foreach>-->
    <!--</update>-->

    <!--批量更新图像地址信息,记录少于10W的时候效率低于第一种-->
    <update id="updateBatchGPSImgPath2DBRecord" >
        update gps
        <trim prefix="set" suffixOverrides=",">
            <trim prefix="basedir = case" suffix="end,">
                <foreach collection="list" item="item" >
                    when dataid=#{item.dataid} and ORIGINAL_URL is null then #{item.baseDir}
                </foreach>
            </trim>
            <trim prefix=" total_losted_size = case" suffix="end,">
                <foreach collection="list" item="item" >
                    when dataid=#{item.dataid} and ORIGINAL_URL is null then #{item.totalLostedSize}
                </foreach>
            </trim>
            <trim prefix=" ORIGINAL_URL = case" suffix="end,">
                <foreach collection="list" item="item" >
                    when dataid=#{item.dataid} and ORIGINAL_URL is null then #{item.originalUrl}
                </foreach>
            </trim>

        </trim>
        where
        <foreach collection="list" item="item" separator="," open=" dataId in (" close=")" >
            #{item.dataid}
        </foreach>
    </update>

    <insert  id="upLoadGPSRecordDatas2UpStream" keyProperty="id" >
        insert into gps (GPSID,COLLECT_TIME,STATUS,LATITUDE,LONGITUDE,SPEED,AZIMUTH,DECLINATION,CREATE_TIME,UPLOAD_TIME,RESULT,AREA,dataid,UPLOADSTATUS,ORIGINAL_URL)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.gpsid},#{item.collect_time},#{item.status},#{item.latitude},
            #{item.longitude},#{item.speed},#{item.azimuth},#{item.declination},
            #{item.create_time},#{item.upload_time},#{item.result},#{item.area},#{item.dataid},#{item.uploadstatus},#{item.originalUrl})
        </foreach>
        ON DUPLICATE KEY UPDATE gpsid= values(gpsid)
    </insert>

</mapper>